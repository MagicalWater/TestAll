fastlane_require 'json'
fastlane_require 'spaceship'
fastlane_require 'rubygems'

isWindows = Actions::PlatformAction.is_windows
isMac = Actions::PlatformAction.is_mac

# windows 需要設置 cmd 為 65001 代表 utf8
# 設置 ssh 的權限為可讀取

if isWindows
  sh "chcp 65001"
  system "cmd /c icacls ssh/id_lottery51 /c /t /inheritance:d"
  system "cmd /c icacls ssh/id_lottery51 /c /t /grant %username%:F"
  system 'cmd /c icacls ssh/id_lottery51 /c /t /remove Administrator "Authenticated Users" BUILTIN\Administrators BUILTIN Everyone System Users'
else
  system "chmod 600 ssh/id_lottery51"
end
puts "系統為 windows? #{isWindows}, 為 mac? #{isMac}"
envHash = merge_env()

before_all do |_lane, _options|

end

desc '列出所有腳本版本'
lane :list_version do
  pull_script(method: 1)
end

desc '檢查腳本版本'
lane :check_version do
  # 安裝需求套件
  # 安裝 configure_extensions
  gem_install(plugin_name: "configure_extensions")
  gem_install(plugin_name: "rmagick")
  # 更新腳本
  pull_script(method: 2)
end

desc '更新 腳本, 並且安裝必要套件, 可接受參數 verion - 指定版本, clear - 本地檔案完整清除'
lane :update_script do |params|
  # 安裝需求套件
  # 安裝 configure_extensions
  gem_install(plugin_name: "configure_extensions")
  # 更新腳本
  pull_script(method: 3, version: params[:version], clear: params.key?(:clear))
end

desc '隱藏 - 期貨app已暫停, 根據 rbs/.backend_app.env 進行app資訊的創建與更新'
private_lane :backend_app do
  system "ruby rbs/backend_app.rb -env=.backend_app.env"
end

desc '隱藏 - 期貨app已暫停, 隨機註冊一個正式環境的帳號'
private_lane :random_account do
  system "ruby rbs/random_signup_account.rb"
end

private_lane :parse_flavor_string do |params|
  flavorString = params[:flavor]
  Actions::BuildApkAction.parse_flavor(flavorString)
end

desc '初始構建專案'
lane :construct_project do
  project_construct
end

desc '自動生成 Route(三大組件) / assets / json, 最後會自動執行 build_runner'
lane :auto_generate do
  json_bean_convert_generate
  assets_generate
  routes_generate(enforce_command: true)
end

desc '封裝好快速執行 build_runner build的指令'
lane :build_runner do
  isWindows = Actions::PlatformAction.is_windows
  if isWindows
    system 'cd ../ & flutter packages pub run build_runner build --delete-conflicting-outputs & cd fastlane/'
  else
    system 'cd ../; flutter packages pub run build_runner build --delete-conflicting-outputs; cd fastlane/;'
  end
end

desc '封裝好快速執行 build_runner clean的指令'
lane :build_runner_clean do
  isWindows = Actions::PlatformAction.is_windows
  if isWindows
    system 'cd ../ & flutter packages pub run build_runner clean & cd fastlane/'
  else
    system 'cd ../; flutter packages pub run build_runner clean; cd fastlane/;'
  end
end

desc '一次打包 android 與 ios 的 e7 app 並上傳到伺服器'
lane :package_e7_app_for_all do |params|

  packageType = params[:type]
  versionType = params[:versionType]
  versionSpecial = params[:version]

  UI.important "即將打包 E7 app"
  if packageType == nil then
    UI.important "打包模式(輸入index)\n1. debug (默認)\n2. release\n3. product: "
    packageType = $stdin.gets.chomp
  end

  if versionType == nil
    UI.important "版號(輸入index)\n1. 自動增加 (默認)\n2. 不變\n3. 自訂: "
    versionType = $stdin.gets.chomp
  end

  if versionType == "3" && versionSpecial == nil
    UI.important "指定版本(格式 name+code - 例 0.1.1+2): "
    versionSpecial = $stdin.gets.chomp
  end

  isWindows = Actions::PlatformAction.is_windows
  if isWindows
    system 'cd ../ & flutter clean & flutter pub get & flutter pub upgrade'
  else
    system 'cd ../; flutter clean; flutter pub get & flutter pub upgrade'
  end

  proj_e7_package_android(
    env_hash: envHash,
    need_clean: false,
    type: packageType,
    increase_version: versionType
  )
  proj_e7_package_ios(
    env_hash: envHash,
    need_clean: false,
    type: packageType,
    increase_version: versionType
  )
end

desc '一次打包 android 與 ios 的 e7 超級代理 並上傳到伺服器'
lane :package_e7_backend_for_all do |params|

  packageType = params[:type]
  versionType = params[:versionType]
  versionSpecial = params[:version]

  UI.important "即將打包 E7 超代 app"
  if packageType == nil then
    UI.important "打包模式(輸入index)\n1. debug (默認)\n2. release\n3. product: "
    packageType = $stdin.gets.chomp
  end

  if versionType == nil
    UI.important "版號(輸入index)\n1. 自動增加 (默認)\n2. 不變\n3. 自訂: "
    versionType = $stdin.gets.chomp
  end

  if versionType == "3" && versionSpecial == nil
    UI.important "指定版本(格式 name+code - 例 0.1.1+2): "
    versionSpecial = $stdin.gets.chomp
  end

  isWindows = Actions::PlatformAction.is_windows
  if isWindows
    system 'cd ../ & flutter clean & flutter pub get & flutter pub upgrade'
  else
    system 'cd ../; flutter clean; flutter pub get & flutter pub upgrade'
  end

  proj_e7_backend_package_android(
    env_hash: envHash,
    need_clean: false,
    type: packageType,
    increase_version: versionType,
    special_version: versionSpecial
  )
  proj_e7_backend_package_ios(
    env_hash: envHash,
    need_clean: false,
    type: packageType,
    increase_version: versionType,
    special_version: versionSpecial
  )
end

desc '自動偵測並生成 Routes 裡的 page 以及 widget'
private_lane :route_generate do
  routes_generate(enforce_command: false)
end

desc '自動偵測並生成對於 jsonBean 轉換類 BeanConverter'
private_lane :json_bean_generate do
  json_bean_convert_generate
end

desc '自動偵測並生成對於 assets/images 的資源檔'
private_lane :asset_generate do
  assets_generate
end

platform :ios do

  userName = envHash['ios_account_name']
  userPass = envHash['ios_account_password']
  bundleId = envHash['ios_app_bundle_id']
  appName = envHash['ios_app_name']
  appIcon = envHash['ios_app_icon']
  outputPath = envHash['ios_output']
  certOutputPath = envHash['ios_cert_output']

  desc 'ios 自動化截圖'
  private_lane :auto_screenshot do
    auto_screenshots(ios_output_path: outputPath, android_enabled: false, ios_enabled: true)
  end

  desc '更新 ios 包名/app名稱'
  lane :update_app do
    set_app_info_ios(
      ios_name: appName,
      ios_bundle_id: bundleId,
      ios_icon: appIcon,
    )
  end

  desc '啟動遠程推送設定'
  private_lane :enable_remote_push do
    Actions::XcodeParseAction.enable_remote_push()
  end

  desc '打包 ios e7 app 並上傳到伺服器'
  lane :package_e7_app do
    proj_e7_package_ios(env_hash: envHash)
  end

  desc '打包 ios e7 超級代理 並上傳到伺服器'
  lane :package_e7_backend do
    proj_e7_backend_package_ios(env_hash: envHash)
  end

  desc '流產線 -> 創建app -> 相關所有證書 -> 開啟自動簽名'
  lane :mx_setting do
    # 先更新 ios 包名/app名稱
    #UI.message "更新 app 名稱以及 bundle id"
    #update_app
    # 建立 app
    #UI.message "在蘋果後台建立app"
    #create_app
    #UI.message "開始創建cert"
    #mx_cert
    UI.message "開啟自動簽名"
    mx_sign
    #UI.message "開始創建profile"
    #mx_sigh
    #UI.message "建立推送證書"
    #mx_push
    UI.message "激活推送設定"
    #enable_remote_push
  end

  desc '刪除 ipa'
  private_lane :mx_delete_ipa do
    targetPath = ".#{outputPath}"
    targetIpa = "#{targetPath}/Runner.ipa"
    targetDSYM = "#{targetPath}/Runner.app.dSYM.zip"
    File.delete(targetIpa)
    File.delete(targetDSYM)
  end

  desc '在 iTunes Connect 以及 AppDeveloper 建立 App, 並且註冊測試裝置'
  private_lane :create_app do

    # 取得 company
    info = get_account_info
    company = info[0]

    # 建立app專案
    produce(
      company_name: company,
      username: userName,
      app_identifier: bundleId,
      sku: bundleId,
      app_name: appName,
      language: 'Simplified Chinese',
      # skip_itc: true -> 只在AppleDeveloper創建app
      #           false -> AppleDeveloper, iTunesConnect 皆創建
      #skip_itc: true,
      app_version: '1.0',
      enable_services: {
        push_notification: "on",
      }
    )

    # 註冊測試裝置
    register_devices(
      devices_file: "./fastlane/files/devices_ios.txt",
      username: userName
    )
  end

  desc '創建/取得 開發/生產證書'
  private_lane :mx_cert do
    # 生成/取得 開發/生產證書
    cert(
      development: true,
      username: userName,
      output_path: certOutputPath,
      filename: "development",
      force: false,
    )
    cert(
      development: false,
      username: userName,
      output_path: certOutputPath,
      filename: "product",
      force: false,
    )
  end

  desc '創建/取得 推送證書'
  private_lane :mx_sigh do
    sigh(
      development: false,
      username: userName,
      output_path: certOutputPath,
      app_identifier: bundleId,
      filename: "profile_product.mobileprovision",
      force: false,
    )
  end

  desc '創建/取得 推送證書'
  private_lane :mx_push do
    # 推送證書
    get_push_certificate(
      development: true,
      pem_name: "aps_development",
      username: userName,
      app_identifier: bundleId,
      output_path: certOutputPath,
      p12_password: "1",
    )
    get_push_certificate(
      development: false,
      pem_name: "aps",
      username: userName,
      app_identifier: bundleId,
      output_path: certOutputPath,
      p12_password: "1",
    )
  end

  desc '創建 p8 key'
  private_lane :mx_p8 do
    fastlane_require 'spaceship'
    Spaceship::Portal.login(userName, userPass)

    keys = Spaceship::Portal::Key.all
    keys.each do |key|
      key.revoke!
    end

    key = Spaceship::Portal::Key.create(name: 'PushKey', apns: true)
    File.write(".#{certOutputPath}/push_key.p8", key.download)
  end

  desc '自動簽名'
  private_lane :mx_sign do
    # 取得 team id
    info = get_account_info
    teamId = info[1]

    # 自動同步bundle 以及 帳號
    automatic_code_signing(
      path: "ios/Runner.xcodeproj",
      use_automatic_signing: true,
      team_id: teamId,
      targets: "Runner",
      bundle_identifier: bundleId,
    )

    #automatic_code_signing(
    #  path: "ios/Runner.xcodeproj",
    #  use_automatic_signing: true,
    #  team_id: teamId,
    #  targets: "message",
    #  bundle_identifier: "#{bundleId}.message",
    #)
  end

  desc '打包並上傳到appstore'
  private_lane :mx_release do
    sh 'cd ../; flutter clean; flutter build ios --release; cd fastlane;'

    # 取得 team id
    info = get_account_info
    teamId = info[1]

    gym(
      output_directory: outputPath,
      scheme: "Runner",
      workspace: "ios/Runner.xcworkspace", # 可省略
      configuration: "Release",              # Debug or Release
      clean: true,                           #清空上次打包信息
      silent: true, # 隱藏打包時不必要的訊息
      export_xcargs: "-allowProvisioningUpdates",
      export_method:"app-store"            # app-store, ad-hoc, package, enterprise, development, developer-id
    )

    deliver(
      ipa: "#{outputPath}/Runner.ipa",
      app_identifier: bundleId,
      username: userName,
      skip_screenshots: true,
      skip_metadata: true,
      team_id: teamId,
    )

    # 刪除 ipa 檔
    mx_delete_ipa
  end

  desc '取得帳號的 team id, 以及公司名稱'
  private_lane :get_account_info do
    fastlane_require 'spaceship'
    clientTunes = Spaceship::Tunes.login(userName, userPass)
    client = Spaceship::Portal.login(userName, userPass)

    infos = []

    infos << "client:\n#{client.user_details_data}"

    strClientTunes = ""
    clientTunes.teams.each do |team|
        infos << "itunes team:\n#{team['contentProvider']['name']} (#{team['contentProvider']['contentProviderId']})"
        infos << "itunes info:\n#{team}"
    end

    results = []

    client.teams.each do |team|
        infos << "dev team:\n#{team['name']} (#{team['teamId']})"
        infos << "dev info:\n#{team}"
        results << "#{team['name']}"
        results << "#{team['teamId']}"
    end

    FileUtils.mkdir_p('infos')
    File.write('infos/account_info.txt', "#{infos.join("\n")}")

    results
  end

end

platform :android do

  appDefault = envHash['android_default']
  outputPath = envHash['android_output']
  appCmsResPath = ENV['APPCMS_RESOURCES']
  appIcon = envHash['android_app_icon']

  desc 'android自動化截圖'
  private_lane :auto_screenshot do
    auto_screenshots(android_output_path: outputPath, android_enabled: true, ios_enabled: false)
  end

  desc '隱藏 - 期貨app已暫停, 將google雲端硬碟裡的證書同步到app cms裡'
  private_lane :pull_cert do
    pull_cert_android(appcms_res_path: appCmsResPath)
  end

  desc '更新 android 包名/app名稱'
  lane :update_app do
    info = parse_flavor_string(flavor: appDefault)
    set_app_info_android(android_name: info['name'], android_bundle_id: info['id'], android_icon: appIcon)
  end

  desc '打包 apk'
  private_lane :release do
    build_apk(outputPath: outputPath, env_hash: envHash)
  end

  desc '打包 android e7 app 並上傳到伺服器'
  lane :package_e7_app do
    proj_e7_package_android(env_hash: envHash)
  end

  desc '打包 android e7 超級代理 並上傳到伺服器'
  lane :package_e7_backend do
    proj_e7_backend_package_android(env_hash: envHash)
  end

  desc '設置 key 資訊'
  lane :update_key do |options|

    specialFlavor = options[:flavor]
    index = options[:index]
    nameCN = options[:name_cn]
    nameEN = options[:name_en]

    # 打印出 可以選擇的 index, 假如三筆都是空的話
    if index.nil? && nameCN.nil? && nameEN.nil?
      if specialFlavor.nil?
        set_key_info(index_need: "-1")
        set_key_info()
      else
        specialFlavor = "android_#{specialFlavor}"
        appFlavor = envHash[specialFlavor]
        info = parse_flavor_string(flavor: appFlavor)
        nameEN = info['key']
        puts "解析: #{appFlavor}"
        set_key_info(name_cn: nameCN, name_en: nameEN, index: index, index_need: "-1")
      end
    else
      set_key_info(name_cn: nameCN, name_en: nameEN, index: index, index_need: "-1")
    end
  end
end

